/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 35.0, "minX": 0.0, "maxY": 1367.0, "series": [{"data": [[0.0, 35.0], [0.1, 37.0], [0.2, 37.0], [0.3, 38.0], [0.4, 38.0], [0.5, 38.0], [0.6, 39.0], [0.7, 39.0], [0.8, 39.0], [0.9, 39.0], [1.0, 39.0], [1.1, 40.0], [1.2, 40.0], [1.3, 40.0], [1.4, 40.0], [1.5, 40.0], [1.6, 41.0], [1.7, 41.0], [1.8, 41.0], [1.9, 41.0], [2.0, 41.0], [2.1, 42.0], [2.2, 42.0], [2.3, 42.0], [2.4, 42.0], [2.5, 42.0], [2.6, 42.0], [2.7, 42.0], [2.8, 43.0], [2.9, 43.0], [3.0, 43.0], [3.1, 43.0], [3.2, 43.0], [3.3, 43.0], [3.4, 44.0], [3.5, 44.0], [3.6, 44.0], [3.7, 44.0], [3.8, 44.0], [3.9, 45.0], [4.0, 45.0], [4.1, 45.0], [4.2, 45.0], [4.3, 45.0], [4.4, 45.0], [4.5, 45.0], [4.6, 45.0], [4.7, 46.0], [4.8, 46.0], [4.9, 46.0], [5.0, 46.0], [5.1, 46.0], [5.2, 46.0], [5.3, 46.0], [5.4, 47.0], [5.5, 47.0], [5.6, 47.0], [5.7, 47.0], [5.8, 47.0], [5.9, 47.0], [6.0, 47.0], [6.1, 48.0], [6.2, 48.0], [6.3, 48.0], [6.4, 48.0], [6.5, 48.0], [6.6, 48.0], [6.7, 48.0], [6.8, 48.0], [6.9, 48.0], [7.0, 49.0], [7.1, 49.0], [7.2, 49.0], [7.3, 49.0], [7.4, 49.0], [7.5, 49.0], [7.6, 49.0], [7.7, 49.0], [7.8, 49.0], [7.9, 49.0], [8.0, 50.0], [8.1, 50.0], [8.2, 50.0], [8.3, 50.0], [8.4, 50.0], [8.5, 50.0], [8.6, 50.0], [8.7, 50.0], [8.8, 51.0], [8.9, 51.0], [9.0, 51.0], [9.1, 51.0], [9.2, 51.0], [9.3, 51.0], [9.4, 51.0], [9.5, 51.0], [9.6, 51.0], [9.7, 51.0], [9.8, 52.0], [9.9, 52.0], [10.0, 52.0], [10.1, 52.0], [10.2, 52.0], [10.3, 52.0], [10.4, 52.0], [10.5, 52.0], [10.6, 52.0], [10.7, 53.0], [10.8, 53.0], [10.9, 53.0], [11.0, 53.0], [11.1, 53.0], [11.2, 53.0], [11.3, 53.0], [11.4, 53.0], [11.5, 54.0], [11.6, 54.0], [11.7, 54.0], [11.8, 54.0], [11.9, 54.0], [12.0, 54.0], [12.1, 54.0], [12.2, 55.0], [12.3, 55.0], [12.4, 55.0], [12.5, 55.0], [12.6, 55.0], [12.7, 55.0], [12.8, 55.0], [12.9, 55.0], [13.0, 55.0], [13.1, 56.0], [13.2, 56.0], [13.3, 56.0], [13.4, 56.0], [13.5, 56.0], [13.6, 56.0], [13.7, 57.0], [13.8, 57.0], [13.9, 57.0], [14.0, 57.0], [14.1, 57.0], [14.2, 57.0], [14.3, 57.0], [14.4, 57.0], [14.5, 57.0], [14.6, 58.0], [14.7, 58.0], [14.8, 58.0], [14.9, 58.0], [15.0, 58.0], [15.1, 58.0], [15.2, 58.0], [15.3, 58.0], [15.4, 59.0], [15.5, 59.0], [15.6, 59.0], [15.7, 59.0], [15.8, 59.0], [15.9, 59.0], [16.0, 59.0], [16.1, 59.0], [16.2, 59.0], [16.3, 59.0], [16.4, 59.0], [16.5, 59.0], [16.6, 60.0], [16.7, 60.0], [16.8, 60.0], [16.9, 60.0], [17.0, 60.0], [17.1, 60.0], [17.2, 60.0], [17.3, 60.0], [17.4, 60.0], [17.5, 60.0], [17.6, 60.0], [17.7, 60.0], [17.8, 60.0], [17.9, 60.0], [18.0, 61.0], [18.1, 61.0], [18.2, 61.0], [18.3, 61.0], [18.4, 61.0], [18.5, 61.0], [18.6, 61.0], [18.7, 61.0], [18.8, 61.0], [18.9, 61.0], [19.0, 61.0], [19.1, 62.0], [19.2, 62.0], [19.3, 62.0], [19.4, 62.0], [19.5, 62.0], [19.6, 62.0], [19.7, 62.0], [19.8, 62.0], [19.9, 62.0], [20.0, 62.0], [20.1, 62.0], [20.2, 63.0], [20.3, 63.0], [20.4, 63.0], [20.5, 63.0], [20.6, 63.0], [20.7, 63.0], [20.8, 63.0], [20.9, 63.0], [21.0, 63.0], [21.1, 63.0], [21.2, 63.0], [21.3, 63.0], [21.4, 63.0], [21.5, 64.0], [21.6, 64.0], [21.7, 64.0], [21.8, 64.0], [21.9, 64.0], [22.0, 64.0], [22.1, 64.0], [22.2, 64.0], [22.3, 64.0], [22.4, 64.0], [22.5, 64.0], [22.6, 64.0], [22.7, 64.0], [22.8, 65.0], [22.9, 65.0], [23.0, 65.0], [23.1, 65.0], [23.2, 65.0], [23.3, 65.0], [23.4, 65.0], [23.5, 65.0], [23.6, 65.0], [23.7, 65.0], [23.8, 66.0], [23.9, 66.0], [24.0, 66.0], [24.1, 66.0], [24.2, 66.0], [24.3, 66.0], [24.4, 66.0], [24.5, 66.0], [24.6, 66.0], [24.7, 66.0], [24.8, 67.0], [24.9, 67.0], [25.0, 67.0], [25.1, 67.0], [25.2, 67.0], [25.3, 67.0], [25.4, 67.0], [25.5, 67.0], [25.6, 67.0], [25.7, 67.0], [25.8, 67.0], [25.9, 67.0], [26.0, 68.0], [26.1, 68.0], [26.2, 68.0], [26.3, 68.0], [26.4, 68.0], [26.5, 68.0], [26.6, 68.0], [26.7, 68.0], [26.8, 68.0], [26.9, 68.0], [27.0, 69.0], [27.1, 69.0], [27.2, 69.0], [27.3, 69.0], [27.4, 69.0], [27.5, 69.0], [27.6, 69.0], [27.7, 69.0], [27.8, 69.0], [27.9, 69.0], [28.0, 69.0], [28.1, 70.0], [28.2, 70.0], [28.3, 70.0], [28.4, 70.0], [28.5, 70.0], [28.6, 70.0], [28.7, 70.0], [28.8, 70.0], [28.9, 70.0], [29.0, 71.0], [29.1, 71.0], [29.2, 71.0], [29.3, 71.0], [29.4, 71.0], [29.5, 71.0], [29.6, 71.0], [29.7, 71.0], [29.8, 71.0], [29.9, 71.0], [30.0, 71.0], [30.1, 71.0], [30.2, 72.0], [30.3, 72.0], [30.4, 72.0], [30.5, 72.0], [30.6, 72.0], [30.7, 72.0], [30.8, 72.0], [30.9, 72.0], [31.0, 72.0], [31.1, 72.0], [31.2, 73.0], [31.3, 73.0], [31.4, 73.0], [31.5, 73.0], [31.6, 73.0], [31.7, 73.0], [31.8, 73.0], [31.9, 73.0], [32.0, 73.0], [32.1, 73.0], [32.2, 73.0], [32.3, 73.0], [32.4, 74.0], [32.5, 74.0], [32.6, 74.0], [32.7, 74.0], [32.8, 74.0], [32.9, 74.0], [33.0, 74.0], [33.1, 74.0], [33.2, 75.0], [33.3, 75.0], [33.4, 75.0], [33.5, 75.0], [33.6, 75.0], [33.7, 75.0], [33.8, 75.0], [33.9, 75.0], [34.0, 75.0], [34.1, 76.0], [34.2, 76.0], [34.3, 76.0], [34.4, 76.0], [34.5, 76.0], [34.6, 76.0], [34.7, 77.0], [34.8, 77.0], [34.9, 77.0], [35.0, 77.0], [35.1, 77.0], [35.2, 77.0], [35.3, 77.0], [35.4, 78.0], [35.5, 78.0], [35.6, 78.0], [35.7, 78.0], [35.8, 78.0], [35.9, 79.0], [36.0, 79.0], [36.1, 79.0], [36.2, 79.0], [36.3, 79.0], [36.4, 79.0], [36.5, 79.0], [36.6, 80.0], [36.7, 80.0], [36.8, 80.0], [36.9, 80.0], [37.0, 80.0], [37.1, 80.0], [37.2, 80.0], [37.3, 81.0], [37.4, 81.0], [37.5, 81.0], [37.6, 81.0], [37.7, 81.0], [37.8, 81.0], [37.9, 82.0], [38.0, 82.0], [38.1, 82.0], [38.2, 82.0], [38.3, 82.0], [38.4, 83.0], [38.5, 83.0], [38.6, 83.0], [38.7, 83.0], [38.8, 83.0], [38.9, 83.0], [39.0, 83.0], [39.1, 84.0], [39.2, 84.0], [39.3, 84.0], [39.4, 84.0], [39.5, 84.0], [39.6, 85.0], [39.7, 85.0], [39.8, 85.0], [39.9, 85.0], [40.0, 85.0], [40.1, 86.0], [40.2, 86.0], [40.3, 86.0], [40.4, 86.0], [40.5, 86.0], [40.6, 87.0], [40.7, 87.0], [40.8, 87.0], [40.9, 87.0], [41.0, 87.0], [41.1, 88.0], [41.2, 88.0], [41.3, 88.0], [41.4, 88.0], [41.5, 88.0], [41.6, 88.0], [41.7, 89.0], [41.8, 89.0], [41.9, 89.0], [42.0, 89.0], [42.1, 89.0], [42.2, 89.0], [42.3, 89.0], [42.4, 89.0], [42.5, 90.0], [42.6, 90.0], [42.7, 90.0], [42.8, 90.0], [42.9, 90.0], [43.0, 90.0], [43.1, 91.0], [43.2, 91.0], [43.3, 91.0], [43.4, 91.0], [43.5, 92.0], [43.6, 92.0], [43.7, 92.0], [43.8, 92.0], [43.9, 93.0], [44.0, 93.0], [44.1, 93.0], [44.2, 93.0], [44.3, 94.0], [44.4, 94.0], [44.5, 94.0], [44.6, 94.0], [44.7, 94.0], [44.8, 95.0], [44.9, 95.0], [45.0, 95.0], [45.1, 96.0], [45.2, 96.0], [45.3, 96.0], [45.4, 96.0], [45.5, 97.0], [45.6, 97.0], [45.7, 97.0], [45.8, 97.0], [45.9, 98.0], [46.0, 98.0], [46.1, 98.0], [46.2, 98.0], [46.3, 99.0], [46.4, 99.0], [46.5, 100.0], [46.6, 100.0], [46.7, 100.0], [46.8, 101.0], [46.9, 101.0], [47.0, 101.0], [47.1, 101.0], [47.2, 102.0], [47.3, 102.0], [47.4, 102.0], [47.5, 103.0], [47.6, 103.0], [47.7, 103.0], [47.8, 104.0], [47.9, 104.0], [48.0, 104.0], [48.1, 105.0], [48.2, 105.0], [48.3, 105.0], [48.4, 106.0], [48.5, 106.0], [48.6, 107.0], [48.7, 107.0], [48.8, 107.0], [48.9, 108.0], [49.0, 108.0], [49.1, 109.0], [49.2, 109.0], [49.3, 109.0], [49.4, 109.0], [49.5, 110.0], [49.6, 110.0], [49.7, 110.0], [49.8, 111.0], [49.9, 111.0], [50.0, 111.0], [50.1, 112.0], [50.2, 112.0], [50.3, 113.0], [50.4, 113.0], [50.5, 114.0], [50.6, 114.0], [50.7, 115.0], [50.8, 116.0], [50.9, 117.0], [51.0, 117.0], [51.1, 118.0], [51.2, 118.0], [51.3, 119.0], [51.4, 119.0], [51.5, 119.0], [51.6, 120.0], [51.7, 120.0], [51.8, 121.0], [51.9, 122.0], [52.0, 122.0], [52.1, 122.0], [52.2, 123.0], [52.3, 124.0], [52.4, 125.0], [52.5, 125.0], [52.6, 126.0], [52.7, 126.0], [52.8, 127.0], [52.9, 127.0], [53.0, 128.0], [53.1, 129.0], [53.2, 130.0], [53.3, 131.0], [53.4, 131.0], [53.5, 132.0], [53.6, 133.0], [53.7, 134.0], [53.8, 135.0], [53.9, 136.0], [54.0, 137.0], [54.1, 138.0], [54.2, 139.0], [54.3, 140.0], [54.4, 141.0], [54.5, 142.0], [54.6, 144.0], [54.7, 146.0], [54.8, 147.0], [54.9, 148.0], [55.0, 148.0], [55.1, 150.0], [55.2, 150.0], [55.3, 151.0], [55.4, 151.0], [55.5, 153.0], [55.6, 153.0], [55.7, 154.0], [55.8, 155.0], [55.9, 156.0], [56.0, 156.0], [56.1, 157.0], [56.2, 158.0], [56.3, 159.0], [56.4, 159.0], [56.5, 160.0], [56.6, 161.0], [56.7, 162.0], [56.8, 163.0], [56.9, 164.0], [57.0, 164.0], [57.1, 166.0], [57.2, 167.0], [57.3, 167.0], [57.4, 168.0], [57.5, 170.0], [57.6, 171.0], [57.7, 172.0], [57.8, 173.0], [57.9, 173.0], [58.0, 174.0], [58.1, 174.0], [58.2, 175.0], [58.3, 176.0], [58.4, 178.0], [58.5, 179.0], [58.6, 180.0], [58.7, 182.0], [58.8, 183.0], [58.9, 184.0], [59.0, 185.0], [59.1, 186.0], [59.2, 187.0], [59.3, 188.0], [59.4, 190.0], [59.5, 191.0], [59.6, 192.0], [59.7, 193.0], [59.8, 193.0], [59.9, 194.0], [60.0, 194.0], [60.1, 195.0], [60.2, 196.0], [60.3, 198.0], [60.4, 202.0], [60.5, 203.0], [60.6, 205.0], [60.7, 206.0], [60.8, 208.0], [60.9, 209.0], [61.0, 214.0], [61.1, 218.0], [61.2, 220.0], [61.3, 221.0], [61.4, 224.0], [61.5, 228.0], [61.6, 230.0], [61.7, 232.0], [61.8, 234.0], [61.9, 237.0], [62.0, 239.0], [62.1, 242.0], [62.2, 246.0], [62.3, 246.0], [62.4, 249.0], [62.5, 251.0], [62.6, 256.0], [62.7, 257.0], [62.8, 261.0], [62.9, 263.0], [63.0, 266.0], [63.1, 267.0], [63.2, 270.0], [63.3, 272.0], [63.4, 277.0], [63.5, 280.0], [63.6, 281.0], [63.7, 283.0], [63.8, 286.0], [63.9, 288.0], [64.0, 291.0], [64.1, 293.0], [64.2, 294.0], [64.3, 296.0], [64.4, 297.0], [64.5, 299.0], [64.6, 300.0], [64.7, 304.0], [64.8, 306.0], [64.9, 309.0], [65.0, 311.0], [65.1, 312.0], [65.2, 316.0], [65.3, 321.0], [65.4, 323.0], [65.5, 329.0], [65.6, 334.0], [65.7, 338.0], [65.8, 344.0], [65.9, 350.0], [66.0, 355.0], [66.1, 359.0], [66.2, 365.0], [66.3, 373.0], [66.4, 378.0], [66.5, 381.0], [66.6, 386.0], [66.7, 388.0], [66.8, 390.0], [66.9, 393.0], [67.0, 395.0], [67.1, 400.0], [67.2, 403.0], [67.3, 405.0], [67.4, 407.0], [67.5, 409.0], [67.6, 412.0], [67.7, 414.0], [67.8, 417.0], [67.9, 418.0], [68.0, 419.0], [68.1, 423.0], [68.2, 426.0], [68.3, 428.0], [68.4, 429.0], [68.5, 430.0], [68.6, 431.0], [68.7, 433.0], [68.8, 435.0], [68.9, 436.0], [69.0, 438.0], [69.1, 439.0], [69.2, 442.0], [69.3, 446.0], [69.4, 450.0], [69.5, 454.0], [69.6, 456.0], [69.7, 461.0], [69.8, 464.0], [69.9, 465.0], [70.0, 466.0], [70.1, 468.0], [70.2, 470.0], [70.3, 471.0], [70.4, 472.0], [70.5, 474.0], [70.6, 474.0], [70.7, 477.0], [70.8, 478.0], [70.9, 481.0], [71.0, 484.0], [71.1, 486.0], [71.2, 490.0], [71.3, 492.0], [71.4, 495.0], [71.5, 498.0], [71.6, 500.0], [71.7, 501.0], [71.8, 503.0], [71.9, 504.0], [72.0, 506.0], [72.1, 509.0], [72.2, 510.0], [72.3, 510.0], [72.4, 511.0], [72.5, 513.0], [72.6, 515.0], [72.7, 516.0], [72.8, 517.0], [72.9, 519.0], [73.0, 520.0], [73.1, 522.0], [73.2, 524.0], [73.3, 529.0], [73.4, 530.0], [73.5, 532.0], [73.6, 533.0], [73.7, 536.0], [73.8, 537.0], [73.9, 538.0], [74.0, 543.0], [74.1, 544.0], [74.2, 546.0], [74.3, 550.0], [74.4, 552.0], [74.5, 556.0], [74.6, 559.0], [74.7, 561.0], [74.8, 568.0], [74.9, 570.0], [75.0, 572.0], [75.1, 580.0], [75.2, 582.0], [75.3, 585.0], [75.4, 587.0], [75.5, 589.0], [75.6, 591.0], [75.7, 592.0], [75.8, 593.0], [75.9, 595.0], [76.0, 597.0], [76.1, 599.0], [76.2, 601.0], [76.3, 604.0], [76.4, 606.0], [76.5, 609.0], [76.6, 613.0], [76.7, 615.0], [76.8, 616.0], [76.9, 618.0], [77.0, 619.0], [77.1, 622.0], [77.2, 626.0], [77.3, 627.0], [77.4, 629.0], [77.5, 631.0], [77.6, 632.0], [77.7, 634.0], [77.8, 635.0], [77.9, 636.0], [78.0, 639.0], [78.1, 640.0], [78.2, 641.0], [78.3, 641.0], [78.4, 642.0], [78.5, 645.0], [78.6, 646.0], [78.7, 648.0], [78.8, 649.0], [78.9, 651.0], [79.0, 653.0], [79.1, 654.0], [79.2, 657.0], [79.3, 659.0], [79.4, 662.0], [79.5, 663.0], [79.6, 664.0], [79.7, 665.0], [79.8, 667.0], [79.9, 668.0], [80.0, 669.0], [80.1, 671.0], [80.2, 672.0], [80.3, 673.0], [80.4, 673.0], [80.5, 674.0], [80.6, 676.0], [80.7, 677.0], [80.8, 678.0], [80.9, 679.0], [81.0, 681.0], [81.1, 682.0], [81.2, 682.0], [81.3, 684.0], [81.4, 685.0], [81.5, 686.0], [81.6, 686.0], [81.7, 688.0], [81.8, 689.0], [81.9, 691.0], [82.0, 694.0], [82.1, 695.0], [82.2, 697.0], [82.3, 698.0], [82.4, 701.0], [82.5, 704.0], [82.6, 706.0], [82.7, 707.0], [82.8, 709.0], [82.9, 713.0], [83.0, 714.0], [83.1, 715.0], [83.2, 716.0], [83.3, 718.0], [83.4, 719.0], [83.5, 721.0], [83.6, 723.0], [83.7, 724.0], [83.8, 725.0], [83.9, 726.0], [84.0, 727.0], [84.1, 728.0], [84.2, 730.0], [84.3, 730.0], [84.4, 732.0], [84.5, 733.0], [84.6, 734.0], [84.7, 736.0], [84.8, 737.0], [84.9, 738.0], [85.0, 738.0], [85.1, 739.0], [85.2, 742.0], [85.3, 744.0], [85.4, 745.0], [85.5, 746.0], [85.6, 747.0], [85.7, 748.0], [85.8, 749.0], [85.9, 751.0], [86.0, 751.0], [86.1, 753.0], [86.2, 755.0], [86.3, 757.0], [86.4, 758.0], [86.5, 759.0], [86.6, 759.0], [86.7, 760.0], [86.8, 761.0], [86.9, 761.0], [87.0, 763.0], [87.1, 764.0], [87.2, 765.0], [87.3, 768.0], [87.4, 769.0], [87.5, 770.0], [87.6, 772.0], [87.7, 774.0], [87.8, 774.0], [87.9, 775.0], [88.0, 776.0], [88.1, 777.0], [88.2, 777.0], [88.3, 778.0], [88.4, 778.0], [88.5, 779.0], [88.6, 780.0], [88.7, 781.0], [88.8, 784.0], [88.9, 784.0], [89.0, 786.0], [89.1, 787.0], [89.2, 789.0], [89.3, 790.0], [89.4, 791.0], [89.5, 792.0], [89.6, 794.0], [89.7, 794.0], [89.8, 796.0], [89.9, 798.0], [90.0, 801.0], [90.1, 802.0], [90.2, 804.0], [90.3, 806.0], [90.4, 809.0], [90.5, 810.0], [90.6, 812.0], [90.7, 813.0], [90.8, 813.0], [90.9, 814.0], [91.0, 816.0], [91.1, 817.0], [91.2, 818.0], [91.3, 821.0], [91.4, 825.0], [91.5, 827.0], [91.6, 829.0], [91.7, 830.0], [91.8, 832.0], [91.9, 832.0], [92.0, 833.0], [92.1, 834.0], [92.2, 836.0], [92.3, 837.0], [92.4, 838.0], [92.5, 839.0], [92.6, 840.0], [92.7, 841.0], [92.8, 843.0], [92.9, 843.0], [93.0, 845.0], [93.1, 846.0], [93.2, 849.0], [93.3, 850.0], [93.4, 852.0], [93.5, 852.0], [93.6, 853.0], [93.7, 854.0], [93.8, 858.0], [93.9, 860.0], [94.0, 860.0], [94.1, 861.0], [94.2, 863.0], [94.3, 864.0], [94.4, 867.0], [94.5, 869.0], [94.6, 870.0], [94.7, 871.0], [94.8, 871.0], [94.9, 871.0], [95.0, 872.0], [95.1, 872.0], [95.2, 873.0], [95.3, 873.0], [95.4, 874.0], [95.5, 874.0], [95.6, 879.0], [95.7, 884.0], [95.8, 887.0], [95.9, 889.0], [96.0, 892.0], [96.1, 895.0], [96.2, 899.0], [96.3, 902.0], [96.4, 906.0], [96.5, 908.0], [96.6, 910.0], [96.7, 911.0], [96.8, 914.0], [96.9, 916.0], [97.0, 918.0], [97.1, 919.0], [97.2, 923.0], [97.3, 929.0], [97.4, 932.0], [97.5, 934.0], [97.6, 939.0], [97.7, 946.0], [97.8, 952.0], [97.9, 958.0], [98.0, 961.0], [98.1, 966.0], [98.2, 968.0], [98.3, 970.0], [98.4, 974.0], [98.5, 988.0], [98.6, 992.0], [98.7, 1003.0], [98.8, 1005.0], [98.9, 1006.0], [99.0, 1019.0], [99.1, 1021.0], [99.2, 1026.0], [99.3, 1029.0], [99.4, 1036.0], [99.5, 1039.0], [99.6, 1065.0], [99.7, 1087.0], [99.8, 1111.0], [99.9, 1218.0], [100.0, 1367.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 2322.0, "series": [{"data": [[0.0, 2322.0], [600.0, 311.0], [700.0, 381.0], [200.0, 209.0], [800.0, 314.0], [900.0, 120.0], [1000.0, 57.0], [1100.0, 5.0], [300.0, 126.0], [1200.0, 2.0], [1300.0, 4.0], [400.0, 225.0], [100.0, 696.0], [500.0, 228.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1420.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3580.0, "series": [{"data": [[0.0, 3580.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1420.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 696.9199999999978, "minX": 1.66264974E12, "maxY": 696.9199999999978, "series": [{"data": [[1.66264974E12, 696.9199999999978]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66264974E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 38.0, "minX": 1.0, "maxY": 960.0, "series": [{"data": [[4.0, 125.33333333333333], [5.0, 154.0], [6.0, 113.0], [8.0, 110.0], [9.0, 138.0], [10.0, 112.0], [11.0, 110.0], [15.0, 127.0], [16.0, 141.0], [17.0, 106.0], [19.0, 106.0], [20.0, 105.0], [21.0, 138.0], [22.0, 121.0], [23.0, 102.0], [24.0, 106.0], [25.0, 105.0], [26.0, 102.0], [28.0, 103.0], [29.0, 113.0], [30.0, 104.0], [31.0, 101.0], [33.0, 102.0], [32.0, 140.0], [34.0, 102.0], [37.0, 107.0], [39.0, 73.0], [38.0, 170.0], [40.0, 76.0], [41.0, 57.0], [43.0, 52.18181818181819], [42.0, 40.75], [44.0, 57.375], [45.0, 60.4], [47.0, 43.87499999999999], [46.0, 45.133333333333326], [49.0, 54.7], [48.0, 74.83333333333334], [50.0, 55.2], [51.0, 53.28571428571428], [53.0, 55.333333333333336], [52.0, 50.84615384615385], [55.0, 44.0], [54.0, 51.75], [57.0, 62.0], [56.0, 51.916666666666664], [59.0, 46.2], [58.0, 54.14285714285714], [60.0, 56.6], [61.0, 60.5], [63.0, 65.75], [62.0, 72.0], [67.0, 67.55555555555556], [66.0, 46.0], [65.0, 57.0], [64.0, 46.285714285714285], [71.0, 51.46153846153847], [69.0, 57.333333333333336], [68.0, 54.6], [70.0, 60.2], [73.0, 52.75], [72.0, 52.2], [75.0, 52.57142857142857], [74.0, 85.83333333333333], [79.0, 47.0], [78.0, 67.33333333333333], [77.0, 68.0], [76.0, 54.5], [81.0, 63.857142857142854], [80.0, 66.33333333333333], [83.0, 58.2], [82.0, 65.33333333333333], [87.0, 58.0], [85.0, 47.888888888888886], [84.0, 59.0], [86.0, 67.83333333333333], [91.0, 47.46153846153846], [90.0, 58.55555555555556], [89.0, 46.285714285714285], [88.0, 56.4], [93.0, 52.45454545454545], [92.0, 57.300000000000004], [95.0, 56.18181818181818], [94.0, 56.33333333333333], [96.0, 54.142857142857146], [99.0, 62.625], [98.0, 48.22222222222222], [97.0, 58.22222222222223], [100.0, 56.77777777777778], [103.0, 68.5], [101.0, 69.5], [102.0, 61.5], [107.0, 76.0], [105.0, 81.66666666666667], [106.0, 88.0], [104.0, 109.5], [109.0, 69.0], [111.0, 68.0], [110.0, 85.5], [108.0, 78.25], [115.0, 60.33333333333334], [114.0, 68.5], [113.0, 64.71428571428572], [112.0, 69.83333333333334], [118.0, 61.99999999999999], [117.0, 62.54545454545455], [116.0, 66.21428571428571], [119.0, 73.5], [123.0, 70.9090909090909], [122.0, 67.38461538461539], [121.0, 63.0], [120.0, 64.66666666666667], [127.0, 61.21052631578947], [125.0, 62.55555555555556], [124.0, 62.8], [126.0, 71.30000000000001], [130.0, 64.86666666666666], [129.0, 66.58823529411765], [135.0, 66.05882352941177], [134.0, 68.27777777777779], [132.0, 66.0], [131.0, 65.94117647058823], [133.0, 68.41666666666666], [128.0, 61.85714285714286], [136.0, 61.272727272727266], [140.0, 69.78571428571428], [139.0, 62.333333333333336], [138.0, 74.83333333333333], [137.0, 63.75000000000001], [143.0, 70.84615384615385], [142.0, 68.76923076923077], [141.0, 65.45454545454545], [150.0, 65.57142857142857], [148.0, 70.375], [147.0, 67.9090909090909], [145.0, 67.27272727272728], [144.0, 68.0], [146.0, 72.69999999999999], [151.0, 74.14285714285714], [149.0, 72.8], [159.0, 66.14285714285714], [158.0, 66.5], [157.0, 68.0], [155.0, 217.28571428571428], [154.0, 72.0], [153.0, 68.5], [152.0, 81.0], [156.0, 71.4], [167.0, 73.66666666666667], [166.0, 64.0], [164.0, 70.25], [163.0, 70.0], [160.0, 64.83333333333333], [162.0, 73.25], [161.0, 69.75], [165.0, 72.75], [169.0, 55.75], [168.0, 77.4], [175.0, 68.2], [174.0, 63.0], [172.0, 77.33333333333333], [170.0, 58.5], [173.0, 98.0], [171.0, 70.5], [178.0, 86.25], [177.0, 59.0], [176.0, 51.0], [183.0, 77.0], [182.0, 80.75], [181.0, 47.0], [180.0, 64.4], [191.0, 66.5], [190.0, 65.0], [189.0, 121.0], [188.0, 72.0], [187.0, 60.333333333333336], [186.0, 96.33333333333333], [185.0, 94.0], [184.0, 68.0], [199.0, 82.0], [198.0, 102.0], [197.0, 77.0], [195.0, 70.5], [194.0, 71.0], [192.0, 71.0], [207.0, 66.0], [205.0, 66.5], [204.0, 66.66666666666667], [203.0, 41.0], [202.0, 50.333333333333336], [201.0, 50.0], [206.0, 58.0], [200.0, 71.0], [208.0, 54.75], [215.0, 63.0], [214.0, 87.0], [213.0, 74.0], [212.0, 77.0], [211.0, 88.0], [210.0, 76.0], [209.0, 78.0], [218.0, 52.5], [217.0, 62.333333333333336], [223.0, 89.0], [222.0, 83.0], [221.0, 71.0], [220.0, 71.0], [219.0, 58.0], [230.0, 54.25], [228.0, 59.0], [227.0, 75.0], [226.0, 49.75], [224.0, 50.2], [231.0, 67.0], [229.0, 66.0], [225.0, 85.0], [239.0, 64.0], [237.0, 76.0], [236.0, 73.0], [235.0, 68.0], [234.0, 66.0], [233.0, 87.0], [232.0, 76.0], [247.0, 69.66666666666667], [245.0, 71.0], [244.0, 66.0], [243.0, 60.0], [242.0, 64.0], [241.0, 91.0], [240.0, 67.5], [252.0, 63.5], [250.0, 43.8], [248.0, 45.6], [255.0, 55.0], [254.0, 86.0], [253.0, 86.0], [251.0, 88.0], [249.0, 65.5], [270.0, 67.0], [269.0, 86.5], [258.0, 84.0], [257.0, 80.5], [266.0, 66.5], [264.0, 72.5], [271.0, 77.0], [267.0, 76.0], [265.0, 83.0], [263.0, 83.0], [262.0, 83.0], [261.0, 83.0], [260.0, 69.5], [285.0, 70.5], [286.0, 69.0], [284.0, 79.0], [275.0, 77.0], [274.0, 74.66666666666667], [282.0, 143.75], [283.0, 71.0], [281.0, 71.5], [280.0, 77.33333333333333], [287.0, 70.0], [279.0, 63.5], [278.0, 85.0], [276.0, 73.0], [273.0, 73.5], [272.0, 75.0], [302.0, 70.0], [303.0, 72.0], [300.0, 68.0], [299.0, 69.0], [298.0, 74.0], [297.0, 51.0], [296.0, 55.333333333333336], [293.0, 71.5], [290.0, 70.5], [288.0, 72.5], [291.0, 67.0], [318.0, 61.0], [319.0, 57.0], [316.0, 56.0], [307.0, 69.0], [306.0, 66.0], [305.0, 73.0], [304.0, 71.0], [315.0, 57.0], [314.0, 54.0], [313.0, 52.0], [312.0, 56.0], [311.0, 66.0], [310.0, 68.0], [309.0, 72.0], [334.0, 51.5], [322.0, 44.666666666666664], [321.0, 93.33333333333333], [320.0, 38.0], [327.0, 59.0], [325.0, 59.5], [335.0, 48.0], [332.0, 50.0], [323.0, 60.0], [331.0, 52.0], [330.0, 51.0], [329.0, 53.0], [328.0, 58.5], [349.0, 51.0], [351.0, 47.0], [348.0, 41.0], [339.0, 47.0], [338.0, 48.0], [337.0, 49.5], [347.0, 51.0], [346.0, 52.0], [345.0, 45.0], [344.0, 49.5], [342.0, 52.0], [341.0, 48.0], [340.0, 42.0], [355.0, 44.5], [358.0, 50.333333333333336], [362.0, 45.0], [361.0, 46.333333333333336], [360.0, 45.0], [364.0, 45.5], [359.0, 47.666666666666664], [357.0, 45.5], [356.0, 54.0], [354.0, 46.666666666666664], [352.0, 44.0], [353.0, 42.0], [382.0, 52.0], [370.0, 83.0], [383.0, 53.0], [380.0, 51.0], [379.0, 47.0], [376.0, 47.0], [375.0, 52.0], [373.0, 60.0], [372.0, 52.25], [396.0, 55.0], [393.0, 76.0], [399.0, 62.0], [397.0, 72.0], [391.0, 47.0], [390.0, 51.0], [389.0, 48.0], [388.0, 51.0], [386.0, 48.0], [385.0, 50.5], [401.0, 60.666666666666664], [410.0, 60.333333333333336], [409.0, 63.0], [408.0, 55.333333333333336], [407.0, 64.66666666666667], [406.0, 63.0], [404.0, 61.666666666666664], [402.0, 60.5], [403.0, 71.2], [412.0, 66.0], [414.0, 69.0], [400.0, 60.0], [405.0, 49.0], [418.0, 109.0], [420.0, 80.0], [419.0, 79.0], [430.0, 54.0], [429.0, 75.80952380952378], [417.0, 74.0], [426.0, 139.5], [425.0, 61.666666666666664], [424.0, 60.333333333333336], [431.0, 69.0], [423.0, 71.0], [422.0, 70.0], [434.0, 77.5], [438.0, 85.0], [439.0, 74.0], [433.0, 79.0], [432.0, 70.0], [437.0, 85.66666666666667], [436.0, 78.0], [435.0, 215.5], [446.0, 95.0], [447.0, 89.4], [441.0, 85.66666666666667], [440.0, 148.33333333333334], [443.0, 82.33333333333333], [442.0, 79.0], [445.0, 84.11111111111113], [444.0, 77.76923076923076], [451.0, 71.25], [458.0, 77.0], [454.0, 113.44444444444444], [459.0, 75.4], [457.0, 73.0], [456.0, 129.0], [463.0, 88.33333333333333], [462.0, 82.0], [461.0, 77.0], [460.0, 86.5], [455.0, 79.0], [453.0, 141.66666666666666], [452.0, 79.4], [449.0, 92.0], [450.0, 91.125], [448.0, 76.66666666666667], [477.0, 97.58333333333331], [476.0, 83.07142857142857], [473.0, 90.9], [464.0, 85.83333333333333], [475.0, 103.81818181818181], [474.0, 101.66666666666667], [472.0, 95.71428571428572], [479.0, 98.63636363636364], [478.0, 94.875], [471.0, 215.66666666666666], [470.0, 106.5], [469.0, 94.5], [468.0, 70.0], [467.0, 69.25], [466.0, 74.33333333333333], [465.0, 104.5], [483.0, 97.33333333333333], [494.0, 154.66666666666666], [493.0, 126.2], [492.0, 106.75], [490.0, 103.36363636363636], [491.0, 74.5], [489.0, 126.5], [495.0, 107.8], [488.0, 88.33333333333333], [487.0, 170.7], [480.0, 111.21739130434783], [484.0, 92.66666666666667], [485.0, 141.2], [486.0, 108.5], [482.0, 86.85714285714286], [481.0, 121.99999999999999], [510.0, 115.33333333333333], [511.0, 63.0], [509.0, 68.5], [508.0, 58.0], [507.0, 48.0], [506.0, 41.0], [504.0, 73.0], [505.0, 80.0], [503.0, 305.6666666666667], [500.0, 122.0], [496.0, 113.63636363636367], [499.0, 125.0], [498.0, 89.33333333333333], [497.0, 82.0], [540.0, 174.0], [543.0, 138.66666666666666], [528.0, 296.0], [530.0, 236.0], [529.0, 55.0], [532.0, 82.91666666666666], [531.0, 86.0], [542.0, 60.0], [541.0, 72.0], [539.0, 68.57142857142857], [538.0, 80.75], [537.0, 133.0], [536.0, 67.6], [527.0, 61.0], [512.0, 58.0], [514.0, 42.0], [513.0, 66.0], [516.0, 64.0], [515.0, 55.0], [519.0, 70.0], [517.0, 64.0], [525.0, 66.0], [524.0, 74.5], [523.0, 53.0], [522.0, 90.0909090909091], [521.0, 78.5], [520.0, 60.0], [535.0, 149.0], [534.0, 189.5], [572.0, 167.5], [575.0, 165.5], [561.0, 174.0], [560.0, 50.0], [563.0, 73.42857142857142], [562.0, 62.5], [565.0, 66.33333333333333], [564.0, 89.0], [574.0, 79.5], [573.0, 66.5], [571.0, 67.5], [570.0, 65.0], [569.0, 74.5], [568.0, 69.5], [559.0, 84.0], [544.0, 196.5], [546.0, 227.75], [547.0, 306.25], [545.0, 61.5], [549.0, 74.0], [548.0, 173.0], [551.0, 239.0], [550.0, 66.0], [558.0, 66.0], [557.0, 205.0], [556.0, 332.0], [555.0, 418.3333333333333], [553.0, 516.0], [552.0, 67.5], [567.0, 79.5], [566.0, 193.5], [602.0, 142.0], [607.0, 290.6666666666667], [606.0, 64.0], [605.0, 72.5], [603.0, 85.66666666666667], [593.0, 139.33333333333334], [592.0, 191.71428571428572], [600.0, 90.0], [601.0, 328.7142857142857], [583.0, 184.0], [582.0, 265.5], [581.0, 105.0], [580.0, 146.0], [579.0, 61.0], [578.0, 94.0], [577.0, 87.33333333333333], [576.0, 64.5], [599.0, 72.33333333333333], [598.0, 72.0], [597.0, 95.0], [596.0, 164.66666666666669], [595.0, 153.0], [594.0, 96.33333333333334], [591.0, 96.71428571428571], [590.0, 134.71428571428572], [589.0, 137.25], [588.0, 121.0], [587.0, 183.0], [586.0, 160.0], [585.0, 89.0], [584.0, 124.75], [633.0, 434.0], [626.0, 73.0], [639.0, 194.0], [634.0, 438.2], [635.0, 188.0], [637.0, 208.0], [636.0, 75.0], [631.0, 275.0], [632.0, 244.0], [615.0, 65.33333333333333], [614.0, 63.5], [613.0, 74.0], [611.0, 67.33333333333333], [612.0, 96.0], [610.0, 70.66666666666667], [609.0, 182.5], [623.0, 59.0], [621.0, 221.0], [620.0, 85.0], [619.0, 73.0], [618.0, 255.0], [616.0, 310.5], [617.0, 143.5], [629.0, 111.33333333333333], [628.0, 248.66666666666666], [627.0, 63.0], [625.0, 105.0], [624.0, 165.66666666666666], [668.0, 213.5], [671.0, 117.0], [658.0, 150.0], [657.0, 144.5], [659.0, 180.0], [656.0, 155.0], [661.0, 114.5], [660.0, 129.66666666666666], [670.0, 98.5], [669.0, 131.6], [667.0, 298.0], [666.0, 157.8], [664.0, 474.75], [654.0, 122.0], [655.0, 205.0], [640.0, 214.0], [642.0, 66.0], [641.0, 260.5], [644.0, 55.333333333333336], [645.0, 172.0], [643.0, 72.0], [647.0, 255.0], [646.0, 129.0], [653.0, 79.0], [651.0, 103.66666666666666], [648.0, 189.0], [649.0, 66.33333333333333], [650.0, 58.0], [665.0, 129.0], [663.0, 155.0], [662.0, 147.0], [697.0, 120.0], [702.0, 199.25], [703.0, 163.25], [688.0, 109.0], [690.0, 160.4], [689.0, 533.75], [699.0, 219.0], [698.0, 194.0], [700.0, 256.0], [701.0, 413.75], [685.0, 260.5], [684.0, 218.0], [683.0, 249.0], [682.0, 60.0], [681.0, 71.0], [680.0, 69.0], [687.0, 307.3333333333333], [686.0, 63.0], [672.0, 222.5], [673.0, 74.0], [675.0, 75.0], [674.0, 77.66666666666667], [677.0, 137.0], [676.0, 143.5], [679.0, 111.0], [696.0, 226.25], [678.0, 130.66666666666666], [694.0, 65.0], [693.0, 323.16666666666663], [692.0, 48.0], [691.0, 72.5], [729.0, 180.5], [722.0, 114.0], [731.0, 183.75], [732.0, 148.0], [733.0, 227.5], [720.0, 120.5], [721.0, 230.0], [735.0, 160.0], [734.0, 224.66666666666666], [730.0, 70.0], [728.0, 108.0], [711.0, 138.0], [710.0, 369.5], [708.0, 118.55555555555556], [709.0, 186.0], [707.0, 182.5], [706.0, 100.33333333333333], [705.0, 139.0], [704.0, 95.4], [719.0, 100.66666666666667], [718.0, 119.0], [717.0, 130.0], [716.0, 135.0], [715.0, 108.25], [714.0, 150.0], [713.0, 240.66666666666669], [712.0, 88.0], [726.0, 143.0], [727.0, 310.5], [725.0, 194.85714285714283], [723.0, 107.25], [724.0, 244.0], [761.0, 333.5], [766.0, 331.07142857142856], [767.0, 410.87500000000006], [752.0, 65.0], [754.0, 67.33333333333333], [755.0, 371.25], [753.0, 99.0], [757.0, 176.66666666666666], [756.0, 215.40000000000003], [765.0, 538.1], [764.0, 452.63636363636374], [763.0, 339.5], [762.0, 180.25], [760.0, 247.09090909090912], [743.0, 208.33333333333334], [742.0, 277.5], [740.0, 95.77777777777777], [738.0, 108.875], [737.0, 325.0], [736.0, 255.0], [739.0, 253.4], [751.0, 191.75], [749.0, 190.5], [750.0, 154.0], [748.0, 276.5], [747.0, 103.0], [746.0, 111.0], [744.0, 101.6], [745.0, 151.0], [759.0, 214.6], [758.0, 304.0], [793.0, 415.875], [798.0, 401.5], [799.0, 314.25], [784.0, 794.3333333333334], [786.0, 439.0], [785.0, 660.4], [788.0, 410.0], [789.0, 279.0], [787.0, 612.9444444444443], [797.0, 344.0], [796.0, 491.22222222222223], [794.0, 310.6], [795.0, 128.25], [792.0, 407.3333333333333], [775.0, 320.7], [774.0, 274.5], [772.0, 314.9], [771.0, 99.25], [770.0, 420.0714285714285], [769.0, 384.85714285714283], [768.0, 406.27272727272725], [773.0, 277.12121212121207], [783.0, 267.0], [781.0, 491.0], [782.0, 144.4], [780.0, 257.55555555555554], [777.0, 248.0], [776.0, 396.2], [778.0, 196.75], [779.0, 127.75], [791.0, 418.6666666666667], [790.0, 653.4], [830.0, 328.3333333333333], [820.0, 507.75], [831.0, 376.85714285714283], [816.0, 313.6666666666667], [819.0, 619.3333333333333], [818.0, 148.33333333333334], [817.0, 410.0], [829.0, 382.33333333333337], [828.0, 253.5714285714286], [827.0, 278.0], [826.0, 196.66666666666666], [825.0, 358.4], [824.0, 409.6], [815.0, 278.5], [800.0, 110.0], [814.0, 138.66666666666666], [813.0, 105.0], [812.0, 136.6], [811.0, 112.2], [810.0, 81.75], [809.0, 127.0], [808.0, 115.66666666666667], [802.0, 165.8], [801.0, 305.6], [805.0, 256.5], [806.0, 157.5], [804.0, 214.5], [803.0, 297.5], [807.0, 657.2], [823.0, 393.33333333333337], [822.0, 368.16666666666663], [821.0, 324.6666666666667], [856.0, 363.5], [862.0, 121.0], [863.0, 382.3333333333333], [849.0, 165.6], [848.0, 178.33333333333334], [860.0, 389.0], [861.0, 128.75], [859.0, 149.16666666666666], [857.0, 275.375], [858.0, 171.0], [845.0, 347.6], [846.0, 176.0], [832.0, 292.3], [833.0, 96.22222222222223], [847.0, 107.28571428571429], [835.0, 231.0769230769231], [834.0, 276.09090909090907], [837.0, 217.83333333333334], [836.0, 306.37499999999994], [839.0, 356.7142857142857], [838.0, 398.77777777777777], [844.0, 202.125], [843.0, 148.2], [842.0, 85.0], [841.0, 261.2], [840.0, 203.25], [854.0, 245.66666666666666], [855.0, 189.5], [853.0, 283.85714285714283], [851.0, 290.5], [852.0, 169.0], [850.0, 258.3333333333333], [888.0, 404.8333333333333], [894.0, 436.25], [895.0, 422.12500000000006], [881.0, 427.0], [882.0, 465.75], [880.0, 302.25], [884.0, 154.33333333333334], [883.0, 157.33333333333334], [892.0, 382.83333333333337], [893.0, 272.6666666666667], [890.0, 408.8333333333333], [889.0, 737.3333333333334], [879.0, 440.0], [878.0, 163.0], [865.0, 105.0], [864.0, 172.0], [868.0, 149.08333333333334], [867.0, 134.0], [866.0, 143.5], [871.0, 606.0], [870.0, 193.0], [869.0, 253.2857142857143], [877.0, 162.33333333333334], [876.0, 602.5], [875.0, 449.6], [873.0, 516.8333333333333], [874.0, 473.6666666666667], [872.0, 381.5], [891.0, 465.4], [886.0, 343.8333333333333], [887.0, 439.0], [885.0, 663.0], [922.0, 932.0], [926.0, 695.0], [927.0, 562.0], [913.0, 746.0], [912.0, 354.0], [916.0, 789.3333333333334], [915.0, 717.0], [914.0, 819.5], [925.0, 934.0], [924.0, 932.0], [923.0, 922.0], [920.0, 558.5], [903.0, 864.0], [902.0, 184.0], [901.0, 638.3333333333334], [898.0, 176.5], [900.0, 461.0], [899.0, 466.0], [897.0, 744.0], [896.0, 460.25], [911.0, 571.0], [909.0, 960.0], [907.0, 937.0], [906.0, 947.0], [905.0, 497.3333333333333], [904.0, 667.2], [919.0, 932.0], [918.0, 686.3333333333334], [917.0, 705.7142857142857], [953.0, 869.0], [958.0, 185.0], [959.0, 907.0], [944.0, 926.0], [947.0, 820.5], [946.0, 912.0], [957.0, 683.0], [955.0, 682.0], [954.0, 714.0], [952.0, 439.5], [935.0, 782.0], [934.0, 838.0], [933.0, 194.0], [932.0, 853.0], [931.0, 831.0], [930.0, 680.3333333333334], [928.0, 720.0], [943.0, 192.0], [942.0, 446.0], [941.0, 874.5], [939.0, 914.0], [938.0, 439.5], [950.0, 936.0], [949.0, 445.5], [989.0, 911.0], [980.0, 911.0], [991.0, 825.0], [977.0, 820.0], [976.0, 916.0], [979.0, 917.0], [978.0, 642.0], [988.0, 840.0], [987.0, 799.3333333333334], [984.0, 537.0], [967.0, 667.0], [965.0, 906.0], [962.0, 191.0], [960.0, 763.5], [961.0, 908.0], [975.0, 912.0], [974.0, 876.3333333333334], [971.0, 675.6666666666666], [969.0, 919.5], [983.0, 918.0], [982.0, 476.0], [981.0, 191.0], [1017.0, 896.5], [1022.0, 910.0], [1023.0, 830.5], [1008.0, 762.0], [1011.0, 923.0], [1010.0, 903.0], [1021.0, 832.75], [1020.0, 863.0], [1019.0, 671.0], [1007.0, 924.0], [995.0, 605.3333333333333], [992.0, 730.5], [997.0, 781.0], [996.0, 918.0], [999.0, 926.0], [998.0, 909.0], [1006.0, 835.0], [1005.0, 909.0], [1004.0, 867.5], [1002.0, 913.0], [1001.0, 910.0], [1000.0, 914.0], [1015.0, 889.0], [1014.0, 696.0], [1013.0, 894.0], [1012.0, 883.0], [1084.0, 685.0], [1086.0, 648.0], [1056.0, 914.0], [1062.0, 797.0], [1070.0, 698.0], [1066.0, 721.25], [1074.0, 683.5], [1072.0, 687.4], [1028.0, 681.0], [1026.0, 887.0], [1032.0, 797.0], [1034.0, 814.3333333333334], [1036.0, 818.0], [1050.0, 659.0], [1048.0, 94.0], [1046.0, 773.5], [1044.0, 885.0], [1042.0, 762.5], [1040.0, 884.0], [1138.0, 775.0], [1126.0, 674.0], [1122.0, 677.0], [1128.0, 673.0], [1130.0, 668.0], [1132.0, 673.0], [1134.0, 773.5], [1148.0, 657.0], [1140.0, 843.0], [1102.0, 475.5], [1100.0, 852.0], [1098.0, 769.0], [1096.0, 873.0], [1094.0, 805.0], [1090.0, 685.5], [1088.0, 820.6666666666666], [1118.0, 688.3333333333334], [1116.0, 705.0], [1112.0, 737.5], [1110.0, 671.75], [1106.0, 804.75], [1104.0, 887.0], [1206.0, 775.5], [1188.0, 843.0], [1214.0, 769.0], [1184.0, 615.5], [1186.0, 613.0], [1192.0, 827.0], [1194.0, 581.3333333333334], [1198.0, 580.3333333333334], [1196.0, 762.0], [1210.0, 726.3333333333334], [1204.0, 676.0], [1200.0, 615.0], [1166.0, 851.5], [1164.0, 502.0], [1162.0, 715.0], [1160.0, 852.0], [1158.0, 604.0], [1156.0, 710.0], [1154.0, 840.0], [1152.0, 80.0], [1178.0, 625.0], [1176.0, 689.0], [1174.0, 623.5], [1172.0, 663.0], [1170.0, 692.6666666666666], [1168.0, 498.0], [1272.0, 816.0], [1248.0, 811.0], [1250.0, 714.0], [1252.0, 821.0], [1258.0, 728.0], [1260.0, 599.0], [1262.0, 691.0], [1276.0, 550.0], [1274.0, 740.3333333333334], [1270.0, 788.0], [1264.0, 709.0], [1218.0, 681.7142857142858], [1220.0, 87.0], [1222.0, 93.0], [1226.0, 725.5], [1228.0, 84.0], [1230.0, 821.5], [1246.0, 674.5], [1244.0, 743.0], [1242.0, 712.3333333333334], [1240.0, 744.0], [1236.0, 618.0], [1234.0, 94.0], [1232.0, 786.0], [1336.0, 689.0], [1312.0, 547.0], [1316.0, 623.0], [1314.0, 793.0], [1318.0, 713.0], [1320.0, 739.25], [1322.0, 643.0], [1326.0, 582.0], [1342.0, 758.3333333333334], [1338.0, 684.0], [1332.0, 778.0], [1330.0, 586.5714285714286], [1328.0, 668.5], [1290.0, 790.0], [1288.0, 705.5], [1286.0, 737.6666666666666], [1284.0, 564.5], [1282.0, 697.5], [1280.0, 669.0], [1310.0, 792.0], [1308.0, 652.0], [1306.0, 791.3333333333334], [1304.0, 585.0], [1300.0, 631.5], [1396.0, 669.5], [1402.0, 600.6], [1376.0, 760.6666666666666], [1386.0, 771.0], [1390.0, 686.0], [1388.0, 613.6666666666666], [1406.0, 740.0], [1404.0, 687.0], [1400.0, 659.3333333333334], [1398.0, 692.3333333333334], [1394.0, 653.0], [1374.0, 690.0], [1348.0, 788.0], [1350.0, 716.25], [1354.0, 727.0], [1358.0, 687.75], [1372.0, 774.0], [1370.0, 758.0], [1368.0, 710.6], [1360.0, 678.0], [1364.0, 784.0], [1470.0, 739.0], [1446.0, 705.5], [1440.0, 747.0], [1450.0, 731.0], [1452.0, 648.0], [1454.0, 712.0], [1466.0, 689.8333333333334], [1462.0, 544.0], [1460.0, 307.0], [1414.0, 669.0], [1412.0, 579.0], [1410.0, 691.6666666666666], [1408.0, 774.0], [1436.0, 702.2], [1434.0, 632.0], [1432.0, 745.0], [1430.0, 529.5], [1428.0, 736.0], [1424.0, 604.0], [1522.0, 574.75], [1532.0, 547.4444444444445], [1504.0, 630.0], [1506.0, 606.5], [1510.0, 634.6666666666666], [1516.0, 510.0], [1518.0, 549.0], [1534.0, 605.0], [1526.0, 515.6666666666666], [1520.0, 609.1250000000001], [1502.0, 512.0], [1472.0, 718.0], [1476.0, 621.6666666666666], [1474.0, 736.0], [1480.0, 640.0], [1484.0, 618.0], [1482.0, 649.0], [1486.0, 629.25], [1500.0, 663.0], [1498.0, 545.3333333333334], [1496.0, 639.5], [1494.0, 494.0], [1490.0, 602.6666666666666], [1488.0, 634.0], [1492.0, 620.4], [1584.0, 631.0], [1596.0, 297.08571428571435], [1568.0, 674.5], [1588.0, 600.0], [1546.0, 684.3333333333334], [1544.0, 654.0], [1542.0, 683.0], [1562.0, 599.0], [1560.0, 654.0], [1552.0, 738.0], [1582.0, 627.0], [1576.0, 535.6666666666666], [1079.0, 684.6666666666666], [1083.0, 862.5], [1059.0, 661.5], [1057.0, 761.0], [1061.0, 727.0], [1065.0, 665.0], [1063.0, 651.0], [1085.0, 684.0], [1081.0, 861.0], [1075.0, 687.5], [1053.0, 746.0], [1029.0, 668.0], [1033.0, 900.6666666666666], [1035.0, 762.0], [1039.0, 848.0], [1037.0, 882.0], [1051.0, 543.6666666666666], [1047.0, 880.0], [1045.0, 510.0], [1043.0, 760.0], [1041.0, 751.5], [1073.0, 687.25], [1147.0, 772.0], [1151.0, 792.0], [1121.0, 673.5], [1123.0, 671.0], [1129.0, 671.0], [1127.0, 673.0], [1131.0, 671.0], [1133.0, 673.0], [1135.0, 667.3333333333334], [1149.0, 833.0], [1145.0, 820.5], [1143.0, 802.0], [1141.0, 795.0], [1139.0, 818.0], [1137.0, 776.0326086956512], [1097.0, 888.0], [1095.0, 738.5], [1093.0, 839.6666666666666], [1091.0, 871.0], [1089.0, 614.0], [1119.0, 675.0], [1113.0, 715.0], [1109.0, 847.0], [1167.0, 510.0], [1185.0, 635.0], [1187.0, 703.0], [1189.0, 648.5], [1191.0, 675.5], [1193.0, 830.0], [1213.0, 752.6666666666666], [1205.0, 719.0], [1203.0, 519.0], [1201.0, 751.0], [1165.0, 723.5], [1161.0, 840.0], [1159.0, 430.0], [1155.0, 830.0], [1153.0, 770.0], [1183.0, 675.6666666666666], [1181.0, 622.5], [1179.0, 677.5], [1177.0, 627.0], [1175.0, 624.0], [1173.0, 713.6666666666666], [1265.0, 662.0], [1269.0, 757.6666666666667], [1255.0, 737.0], [1275.0, 533.0], [1279.0, 671.0], [1251.0, 821.0], [1253.0, 646.5], [1257.0, 738.0], [1259.0, 593.0], [1261.0, 801.5], [1263.0, 804.0], [1277.0, 757.5], [1247.0, 591.0], [1219.0, 838.0], [1221.0, 834.0], [1223.0, 837.0], [1227.0, 713.5], [1229.0, 681.3333333333334], [1245.0, 808.0], [1243.0, 664.0], [1241.0, 606.0], [1239.0, 666.2222222222222], [1237.0, 696.6666666666666], [1235.0, 683.5], [1233.0, 596.0], [1333.0, 666.3333333333334], [1317.0, 566.0], [1339.0, 655.6666666666666], [1343.0, 779.5], [1313.0, 806.0], [1319.0, 653.5], [1323.0, 691.8], [1325.0, 716.0], [1341.0, 703.0], [1335.0, 667.5], [1331.0, 572.0], [1329.0, 551.5], [1295.0, 796.0], [1293.0, 811.0], [1291.0, 637.0], [1287.0, 807.0], [1311.0, 675.5], [1309.0, 524.0], [1307.0, 718.0], [1305.0, 592.0], [1303.0, 794.3333333333334], [1301.0, 643.5], [1299.0, 794.0], [1297.0, 733.6], [1377.0, 778.0], [1407.0, 536.0], [1379.0, 661.5], [1383.0, 363.0], [1381.0, 671.0], [1385.0, 773.0], [1389.0, 618.0], [1401.0, 728.75], [1399.0, 744.0], [1397.0, 618.5], [1393.0, 634.0], [1345.0, 675.5], [1351.0, 785.0], [1355.0, 645.0], [1359.0, 532.0], [1371.0, 732.5], [1367.0, 682.0], [1365.0, 729.75], [1363.0, 759.0], [1467.0, 745.0], [1471.0, 755.0], [1441.0, 609.0], [1445.0, 668.0], [1443.0, 634.5], [1447.0, 684.5], [1451.0, 706.0], [1453.0, 761.0], [1455.0, 642.25], [1469.0, 616.0], [1465.0, 674.0], [1461.0, 662.1428571428572], [1459.0, 701.0], [1457.0, 617.1111111111111], [1421.0, 538.5], [1419.0, 644.5], [1417.0, 606.6666666666666], [1415.0, 636.0], [1411.0, 638.0], [1409.0, 592.25], [1439.0, 680.0], [1437.0, 632.75], [1433.0, 750.0], [1427.0, 650.3333333333334], [1531.0, 502.5], [1525.0, 605.3333333333334], [1509.0, 594.3333333333334], [1535.0, 502.0], [1505.0, 659.5], [1513.0, 569.25], [1511.0, 585.0], [1515.0, 657.3333333333334], [1517.0, 430.0], [1533.0, 516.0], [1529.0, 603.5], [1523.0, 535.0], [1521.0, 557.0], [1479.0, 756.0], [1477.0, 585.25], [1481.0, 754.0], [1487.0, 736.0], [1501.0, 667.0], [1499.0, 499.0], [1497.0, 729.0], [1495.0, 522.0], [1493.0, 753.0], [1491.0, 643.0], [1585.0, 465.0], [1595.0, 225.0], [1593.0, 350.0], [1591.0, 383.8660714285714], [1549.0, 640.3333333333333], [1545.0, 599.0], [1543.0, 740.0], [1541.0, 718.0], [1539.0, 499.0], [1537.0, 581.5], [1563.0, 680.6666666666666], [1561.0, 577.0], [1559.0, 643.0], [1557.0, 604.3333333333335], [1555.0, 525.0], [1579.0, 635.0], [1571.0, 641.0], [1.0, 357.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[696.9166000000001, 302.47440000000057]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1596.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 19916.666666666668, "minX": 1.66264974E12, "maxY": 433833.3333333333, "series": [{"data": [[1.66264974E12, 433833.3333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66264974E12, 19916.666666666668]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66264974E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 302.47440000000057, "minX": 1.66264974E12, "maxY": 302.47440000000057, "series": [{"data": [[1.66264974E12, 302.47440000000057]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66264974E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 268.4169999999997, "minX": 1.66264974E12, "maxY": 268.4169999999997, "series": [{"data": [[1.66264974E12, 268.4169999999997]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66264974E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 69.21440000000015, "minX": 1.66264974E12, "maxY": 69.21440000000015, "series": [{"data": [[1.66264974E12, 69.21440000000015]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66264974E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 35.0, "minX": 1.66264974E12, "maxY": 1367.0, "series": [{"data": [[1.66264974E12, 1367.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66264974E12, 801.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66264974E12, 1019.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66264974E12, 872.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66264974E12, 35.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66264974E12, 111.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66264974E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 69.0, "minX": 32.0, "maxY": 701.0, "series": [{"data": [[32.0, 111.0], [1583.0, 701.0], [1688.0, 69.0], [1697.0, 88.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1697.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 69.0, "minX": 32.0, "maxY": 647.0, "series": [{"data": [[32.0, 111.0], [1583.0, 647.0], [1688.0, 69.0], [1697.0, 87.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1697.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 83.33333333333333, "minX": 1.66264974E12, "maxY": 83.33333333333333, "series": [{"data": [[1.66264974E12, 83.33333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66264974E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 83.33333333333333, "minX": 1.66264974E12, "maxY": 83.33333333333333, "series": [{"data": [[1.66264974E12, 83.33333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66264974E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 83.33333333333333, "minX": 1.66264974E12, "maxY": 83.33333333333333, "series": [{"data": [[1.66264974E12, 83.33333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66264974E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 83.33333333333333, "minX": 1.66264974E12, "maxY": 83.33333333333333, "series": [{"data": [[1.66264974E12, 83.33333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66264974E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

